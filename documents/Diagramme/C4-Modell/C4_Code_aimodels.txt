```mermaid
classDiagram
    class ModelTrainerContainer {
        - api_base_url: str
        - trainers: arr
        + get_all_models() dict
        + make_prediction(trainer_string: str, model_int: int, image_array: arr) dict
        + train_model(trainer_string: str, model_int: int, num_epochs: int, reshape_size: int) str
        + train_all_models(num_epochs: int, reshape_size: int) dict
        + get_classifier_report(trainer_string: str, model_int: int, reshape_size: int) str
        + get_all_classifier_reports(reshape_size: int) dict
        - fetch_dataset(reshape_size) arr
    }

    class ModelTrainer {
        - trainer_name: str
        - models: arr
        + get_all_models() arr
        + make_prediction(model_int: int, image_array: arr) arr
        + train_model(model_int: int, dataset: arr, num_epochs: int, reshape_size: int) str
        + train_all_models(dataset: arr, num_epochs: int, reshape_size: int) arr
        + get_classification_report(model_int: int, dataset: arr, reshape_size: int) str
        + get_all_classification_reports(dataset: arr, reshape_size: int) arr
    }

    class ModelTrainerPyTorch { }
    class ModelTrainerSKLearn { }
    class ModelTrainerTensorFlow { }

    ModelTrainerPyTorch --|> ModelTrainer
    ModelTrainerTensorFlow --|> ModelTrainer
    ModelTrainerSKLearn --|> ModelTrainer
    ModelTrainerContainer o-- ModelTrainer : contains

classDiagram
    class IModel {
        <<Interface>>
        + check()
        + train(dataset: arr, epochs: int, reshape_size: int)
        + make_prediction(image: PILImage)
        + get_classifier_report(dataset: arr, reshape_size: int)
        - save_model_metadata(model_save_path: str, model_name: str, reshape_size: int, class_labels: arr)
        - load_model_metadata(model_save_path: str, model_name: str)
    }

    class BaseModelPyTorch {
        - model: obj
        - model_save_path: str
        - model_name: str
        - device: torchDevice
        + check() bool
        + train(dataset: arr, epochs: int, reshape_size: int) str
        + make_prediction(image: PILImage) arr
        + get_classifier_report(dataset: arr, reshape_size: int) str
    }

    class BaseModelSKLearn {
        - model: obj
        - model_save_path: str
        - model_name: str
        + check() bool
        + train(dataset: arr, epochs: int, reshape_size: int) str
        + make_prediction(image: PILImage) arr
        + get_classifier_report(dataset: arr, reshape_size: int) str
    }

    class BaseModelTF {
        - model: obj
        - model_build_fn: function
        - model_save_path: str
        - model_name: str
        + check() bool
        + train(dataset: arr, epochs: int, reshape_size: int) str
        + make_prediction(image: PILImage) arr
        + get_classifier_report(dataset: arr, reshape_size: int) str
    }

    BaseModelPyTorch --|> IModel
    BaseModelTF --|> IModel
    BaseModelSKLearn --|> IModel
classDiagram
    class ModelPyTorch {
        - model: obj
        + __init__(model: obj)
    }

    class ModelSKLearn {
        - model: obj
        + __init__(model: obj)
    }

    class ModelTF {
        - model: obj
        - build_model(reshape_size: int) obj
        + __init__(model: obj)
    }

    class BaseModelPyTorch {
        - model: obj
        + __init__(model: obj)
    }

    class BaseModelSKLearn {
        - model: obj
        + __init__(model: obj)
    }

    class BaseModelTF {
        - model: obj
        + __init__(model: obj)
    }

    ModelPyTorch --|> BaseModelPyTorch
    ModelTF --|> BaseModelTF
    ModelSKLearn --|> BaseModelSKLearn

    ModelPyTorch --> BaseModelPyTorch : passes model
    ModelTF --> BaseModelTF : passes model
    ModelSKLearn --> BaseModelSKLearn : passes model
classDiagram
    class ModelProcessor {
        <<Module>>
        + adjust_input_channels_pytorch(model: obj) bool
        + adjust_input_channels_pytorch_tensor(model: obj, x_tensor: torchTensor, reshape_size: int) torchTensor
        + adjust_model_output_layer_pytorch(model: obj, num_classes: int, device: torchDevice, model_name: str) obj
        + adjust_model_output_layer_keras(model: obj, num_classes: int, model_name: str) obj
        + detect_input_channels_pytorch(model: obj, reshape_size: int) int
    }

    class ImageProcessor {
        <<Module>>
        + load_images_from_api(api_uri: str, reshape_size: int) arr
        + preprocess_image(image: PILImage, reshape_size: int) arr
        - fetch_from_API(api_uri: str) arr
    }

    BaseModelPyTorch --> ModelProcessor: uses
    BaseModelPyTorch --> ImageProcessor: uses
    BaseModelTF --> ModelProcessor: uses
    BaseModelTF --> ImageProcessor: uses
classDiagram
    class APIHandler {
        - app: FastAPI
        - model_trainer: ModelTrainer
        + start()
    }

    class ImageController { - router: FastAPIRouter }
    class ModelController { - router: FastAPIRouter }
    class UserController { - router: FastAPIRouter }

    APIHandler --> ImageController: uses
    APIHandler --> UserController: uses
    APIHandler --> ModelController: uses
classDiagram
    class UserRequest {
        email: str
        password: str
        mfa: bool
    }

    class PredictionRequest {
        model_int: int
        trainer_string: str
        image: str
    }

    class ClassifierReportRequest {
        email: str
        password: str
        trainer_string: str
        model_int: int
        reshape_size: int
    }

    class ClassifierReportsRequest {
        email: str
        password: str
        reshape_size: int
    }

    class RetrainAllRequest {
        email: str
        password: str
        num_epochs: int
        reshape_size: int
    }

    class RetrainRequest {
        email: str
        password: str
        trainer_string: str
        model_int: int
        num_epochs: int
        reshape_size: int
    }

    class SavePredictionRequest {
        email: str
        password: str
        prediction: dict
        image: str
    }

    class ResizeRequest {
        image: str
    }

    ImageController --> ResizeRequest: uses
    ModelController --> ClassifierReportRequest: uses
    ModelController --> ClassifierReportsRequest: uses
    ModelController --> PredictionRequest: uses
    ModelController --> RetrainAllRequest: uses
    ModelController --> RetrainRequest: uses
    UserController --> UserRequest: uses
    UserController --> SavePredictionRequest: uses
